//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
36730  "–í–µ–ª–∏–∫–∏–µ –∫—Ä—ã–ª—å—è —Ñ–µ–Ω–∏–∫—Å–∞"36731  "^ff5c00–í–µ–ª–∏–∫–∏–µ –∫—Ä—ã–ª—å—è —Ñ–µ–Ω–∏–∫—Å–∞^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff10 ^ffcb4a–º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff7 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,15^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú—É–¥—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ê—Å—É—Ä–∞–ú–∞–≥ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Ñ–µ–Ω–∏–∫—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∞—Ç–∞–∫—É–µ—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–∞ –ª–∏–Ω–∏–∏ –¥–ª–∏–Ω–æ–π^96f5ff18^ffffff –º –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Ö –Ω–∞ ^96f5ff18^ffffff –º.–ù–∞–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è,–ø–ª—é—Å ^96f5ff5395^ffffff –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è.–®–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏ –∞—Ç–∞–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff50%%^ffffff.–û—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤.^ffcb4a–≠—Ñ—Ñ–µ–∫—Ç –∑–æ–ª–æ—Ç–æ–π —Ä—É–Ω—ã:@1^ffcb4a1-4 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff40%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff356^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è^ffcb4a5-7 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff50%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff534^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è^ffcb4a8-9 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff60%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff712^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è^ffcb4a 10 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff70%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff890^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è@1@2^ffcb4a–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff%d%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff%d^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL673 
#define __CPPGEN_GNET_SKILL673 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill673:public Skill 
    { 
    public: 
        enum { SKILL_ID = 673 }; 
        Skill673 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill673Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1500;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (30);
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return skill->GetRand () < 5;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1200;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (120);
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill673Stub ():SkillStub (673) 
    { 
        cls                 = 3; 
#ifdef _SKILL_CLIENT 
        name                = L"øÒ°§≤–ÃÂ÷‰"; 
        nativename          = "øÒ°§≤–ÃÂ÷‰"; 
        icon                = "≤–ÃÂ÷‰2.dds"; 
#endif 
        max_level           = 1; 
        type                = 3; 
        allow_ride          = 0; 
        attr                = 0; 
        rank                = 30; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1622; 
        allow_forms         = 2; 
        apcost              = 0; 
        apgain              = 10; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "2≤–ÃÂ÷‰.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(320, 10)); 
        restrict_weapons.push_back (292); 
        restrict_weapons.push_back (0); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1200;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 30000,30000,30000,30000,30000,30000,30000,30000,30000,30000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 89,89,89,89,89,89,89,89,89,89 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (10);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 150,150,150,150,150,150,150,150,150,150 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, 150, 25);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (26000);
            skill->GetVictim ()->SetRatio (0.25);
            skill->GetVictim ()->SetCanti (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (18);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
