//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
66300  "–í–µ–ª–∏–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∏"66301  "^ff5c00–í–µ–ª–∏–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∏^ffcb4a–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–±—Ä–∞–∑–µ –±–µ–ª–æ–π –æ–±–µ–∑—å—è–Ω—ã^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff–±–ª–∏–∂–Ω–∏–π –±–æ–π^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,5 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1,5 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff30^ffcb4a —Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–±–æ–µ–≤–æ–π —à–µ—Å—Ç, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–° –æ–≥–ª—É—à–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–≤–æ–º —Å—Ç—Ä–∞–Ω–Ω–∏–∫ –Ω–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π, –Ω–∞–Ω–æ—Å—è –∏–º^96f5ff190%%^ffffff –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ –ø–ª—é—Å ^96f5ff%d^ffffff –µ–¥. —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ –∏ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è –∏—Ö.–ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –∑–Ω–∞–∫–æ–≤ '–ò–Ω—å' –∏ '–Ø–Ω', –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è, –æ–≥–ª—É—à–∞—è–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–∞ ^96f5ff5^ffffff —Å–µ–∫.^ffa4a9–í–æ –≤—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ –Ω–∞–ª–æ–∂–µ–Ω–∏—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.–£–º–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.^a6caf0–ù–µ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è. –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ^ffffff1^a6caf0 —Ü–∏.^00ff00–≠—Ñ—Ñ–µ–∫—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–Ω—ã: @1^00ff001-4 —É—Ä.: –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ ^96f5ff27^00ff00 —Å–µ–∫.^00ff005-7 —É—Ä.: –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ ^96f5ff23^00ff00 —Å–µ–∫.^00ff008-9 —É—Ä.: –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ ^96f5ff19^00ff00 —Å–µ–∫. ^00ff0010 —É—Ä.: –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ ^96f5ff15^00ff00 —Å–µ–∫.@1@2 ^00ff00–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ ^96f5ff%d^00ff00 —Å–µ–∫.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL6630 
#define __CPPGEN_GNET_SKILL6630 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill6630:public Skill 
    { 
    public: 
        enum { SKILL_ID = 6630 }; 
        Skill6630 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill6630Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1 : public SkillStub::State
        {
        public:
            int GetTime(Skill *skill) const
            {
                return 500;
            }
            bool Quit(Skill *skill) const
            {
                return false;
            }
            bool Loop(Skill *skill) const
            {
                return false;
            }
            bool Bypass(Skill *skill) const
            {
                return false;
            }
            void Calculate(Skill *skill) const
            {
                skill->GetPlayer()->SetDecmp(0.2 * (330));
                skill->GetPlayer ()->SetInvincibleMonkey (1550);
                skill->GetPlayer()->SetPray(1);
            }
            bool Interrupt(Skill *skill) const
            {
                return false;
            }
            bool Cancel(Skill *skill) const
            {
                return 1;
            }
            bool Skip(Skill *skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2 : public SkillStub::State
        {
        public:
            int GetTime(Skill *skill) const
            {
                return 1500;
            }
            bool Quit(Skill *skill) const
            {
                return false;
            }
            bool Loop(Skill *skill) const
            {
                return false;
            }
            bool Bypass(Skill *skill) const
            {
                return false;
            }
            void Calculate(Skill *skill) const
            {
                skill->GetPlayer()->SetDecmp(0.8 * (330));
                skill->SetPlus(10965);
                skill->SetRatio(1.7);
                skill->SetDamage(skill->GetAttack());
                skill->GetPlayer()->SetPerform(1);
            }
            bool Interrupt(Skill *skill) const
            {
                return false;
            }
            bool Cancel(Skill *skill) const
            {
                return 0;
            }
            bool Skip(Skill *skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3 : public SkillStub::State
        {
        public:
            int GetTime(Skill *skill) const
            {
                return 0;
            }
            bool Quit(Skill *skill) const
            {
                return false;
            }
            bool Loop(Skill *skill) const
            {
                return false;
            }
            bool Bypass(Skill *skill) const
            {
                return false;
            }
            void Calculate(Skill *skill) const
            {
            }
            bool Interrupt(Skill *skill) const
            {
                return false;
            }
            bool Cancel(Skill *skill) const
            {
                return 0;
            }
            bool Skip(Skill *skill) const
            {
                return 0;
            }
        };
#endif 
    Skill6630Stub ():SkillStub (6630) 
    { 
        cls                 = 14; 
#ifdef _SKILL_CLIENT 
        name                = L"…Ò°§∆∆≥Â∫Ë√…"; 
        nativename          = "…Ò°§∆∆≥Â∫Ë√…"; 
        icon                = "…Ò≥Â∆∆∫Ë√…¬Ã.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 7; 
        rank                = 41; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1501; 
        allow_forms         = 2; 
        apcost              = 100; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = ""; 
        aerial_effect       = ""; 
#endif 
        range.type          = 4; 
        has_stateattack     = 0; 
        runes_attr          = 3; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 1401; 
        extra_effect        = 0; 
        immune_casting      = 1; 
        pre_skills.push_back (std::pair < ID, int >(6500, 1)); 
        restrict_weapons.push_back (69843); 
        restrict_weapons.push_back (0); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
    int GetExecutetime (Skill * skill) const 
    {
        static int array[10] = { 1500,1500,1500,1500,1500,1500,1500,1500,1500,1500 };
        return array[skill->GetLevel () - 1];
    }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 31000,31000,31000,31000,31000,31000,31000,31000,31000,31000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    float GetRadius(Skill *skill) const
    {
        return (float)(skill->GetPlayer ()->GetRange () + 8);
    }
    float GetAttackdistance(Skill *skill) const
    {
        return (float)(skill->GetPlayer ()->GetRange () + 7);
    }
    float GetAngle(Skill *skill) const
    {
        return (float)(1 - 0.0111111 * (15));
    }
    float GetPraydistance(Skill *skill) const
    {
        return (float)(skill->GetPlayer ()->GetRange () + 8);
    }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 330,330,330,330,330,330,330,330,330,330 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
    int GetIntroduction(Skill *skill, wchar_t *buffer, int length, wchar_t *format) const
    {
            return _snwprintf(buffer, length, format);
    }
#endif 
#ifdef _SKILL_SERVER 
    int GetEnmity(Skill *skill) const
    {
            return 0;
    }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool StateAttack (Skill * skill) const
    {
            skill->GetVictim ()->SetProbability (1.0 * (skill->GetPlayer ()->GetCls () == -1 ? 0 : 100));
            skill->GetVictim ()->SetTime (2050);
            skill->GetVictim ()->SetNofly (1);    

            skill->GetVictim ()->SetProbability (1.0 * (skill->GetT0 () && skill->GetT1 () ? 100 : 0));
            skill->GetVictim ()->SetTime (5050);
            skill->GetVictim ()->SetValue (2);
            skill->GetVictim ()->SetPalsy (1);
            return true;
    }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const
    {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetRemoveFilterMonkey (1);
            return true;
    }   
#endif 
#ifdef _SKILL_SERVER 
    float GetEffectdistance(Skill *skill) const
    {
        return (float)(skill->GetPlayer ()->GetRange () + 10);
    }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) const
    {
        return (float) (player->GetFilterID (4485));
    }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) const
    {
        return (float) (player->GetFilterID (4486));
    }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed(Skill *skill) const
    {
        return 0;
    }
#endif 
#ifdef _SKILL_SERVER 
    bool TakeEffect(Skill *skill) const
    {;
        return true;
    }
#endif 
#ifdef _SKILL_SERVER 
    float GetHitrate(Skill *skill) const
    {
        return (float)(1.0);
    }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
