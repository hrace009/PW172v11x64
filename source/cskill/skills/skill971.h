//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
39710  "–í–µ–ª–∏–∫–∏–π –º–µ—á-–≤–µ—Ç—Ä–æ–≥–æ–Ω"39711  "^ff5c00–í–µ–ª–∏–∫–∏–π –º–µ—á-–≤–µ—Ç—Ä–æ–≥–æ–Ω^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff20^ffffff ^ffcb4a–º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff70^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,2 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,8 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff2,0 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,1^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–µ—á^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú–æ—â—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–ù–∞–Ω–æ—Å–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É ^96f5ff110%%^ffffff –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è, –ø–ª—é—Å ^96f5ff1815^ffffff –µ–¥.–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ^96f5ff40%%^ffffff –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç ^96f5ff2060^ffffff –µ–¥. —É—Ä–æ–Ω–∞ –æ—Ç –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è–∏ –æ–±–µ–∑–¥–≤–∏–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ ^96f5ff4^ffffff —Å–µ–∫., –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –µ–≥–æ –∑–∞—â–∏—Ç—ã –Ω–∞ ^96f5ff20^ffffff –µ–¥.–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è - ^96f5ff8^ffffff —Å–µ–∫.^00ffff–≠—Ñ—Ñ–µ–∫—Ç —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–π —Ä—É–Ω—ã:@1^00ffff1-4 —É—Ä.: –¥–∞–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^ffffff2^00ffff –º^00ffff5-7 —É—Ä.: –¥–∞–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^ffffff4^00ffff –º^00ffff8-9 —É—Ä.: –¥–∞–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^ffffff6^00ffff –º^00ffff 10 —É—Ä.: –¥–∞–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^ffffff8^00ffff –º@1@2^00ffff–î–∞–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^ffffff%d^00ffff –º.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL971 
#define __CPPGEN_GNET_SKILL971 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill971:public Skill 
    { 
    public: 
        enum { SKILL_ID = 971 }; 
        Skill971 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill971Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecelfmp (85 + (skill->GetLevel () - 1) * 3);
                skill->GetPlayer ()->SetDecelfap (73 + 29 * (skill->GetLevel () - 1));
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill971Stub ():SkillStub (971) 
    { 
        cls                 = 258; 
#ifdef _SKILL_CLIENT 
        name                = L"ÀÈ–ƒ÷‰"; 
        nativename          = "ÀÈ–ƒ÷‰"; 
        icon                = "ÀÈ–ƒ÷‰.dds"; 
#endif 
        max_level           = 10; 
        type                = 3; 
        allow_ride          = 0; 
        attr                = 3; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 1; 
        apcost              = 73029; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 1; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "ÀÈ–ƒ÷‰.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 0)); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 0;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 1000,1000,1000,1000,1000,1000,1000,1000,1000,1000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 4000,5620,7780,10640,14480,19660,26600,36200,59000,96800 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 800036,800041,800046,800051,800056,800061,800066,800071,800076,800081 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (20);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 85,88,91,94,97,100,103,106,109,112 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format,
                               skill->GetLevel (),
                               85 + (skill->GetLevel () - 1) * 3, 73 + 29 * (skill->GetLevel () - 1), 2 * skill->GetLevel (), 2 * skill->GetLevel ());

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 100;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (8000);
            skill->GetVictim ()->SetRatio (0.02 * skill->GetLevel () + skill->GetT1 () * 0.002);
            skill->GetVictim ()->SetShowicon (1);
            skill->GetVictim ()->SetWeakelement (1);
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (8000);
            skill->GetVictim ()->SetRatio (0.3);
            skill->GetVictim ()->SetSlow (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (25);
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetTalent0 (PlayerWrapper * player) const
        {
            return (float) (player->GetElfstr ());
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetTalent1 (PlayerWrapper * player) const
        {
            return (float) (player->GetElfagi ());
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 20;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
