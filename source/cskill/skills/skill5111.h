//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
51110  "–ü—Ä–∏–∑—ã–≤ –∫–∞–≤–∞–ª–µ—Ä–∏–∏"51111  "^ff0000–ü—Ä–∏–∑—ã–≤ –∫–∞–≤–∞–ª–µ—Ä–∏–∏ –£—Ä–æ–≤–µ–Ω—å %d|if&dynskilllv()>0&^ffcb4a +%d&|^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff278^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,6 ^ffcb4a—Å–µ–∫. ^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff300 ^ffcb4a—Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–µ—á –∏ —â–∏—Ç^ffcb4a–†–∞—Å—Ö–æ–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ^96f5ff–ñ–∏–≤–∞—è –¥—É—à–∞^ffffff^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ë–ª–∞–≥–æ—á–µ—Å—Ç–∏–≤—ã–π–ö–æ–ø—ã—Ç–∞ –±–æ–µ–≤–æ–≥–æ —Å–∫–∞–∫—É–Ω–∞ –æ–±—Ä–∞—â–∞—é—Ç —â–∏—Ç—ã –≤ –ø—ã–ª—å, –æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞—è –≤—Ä–∞–≥–æ–≤.–ù–∞ ^96f5ff|if&(skilllv()+dynskilllv())<2&10&20|^ffffff —Å–µ–∫. –ø–∞–ª–∞–¥–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫–æ –≤—Å–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º,–ø—Ä–∏ —ç—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff100%%^ffffff,–∞ –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff50%%^ffffff. –ö–∞–∂–¥—É—é ^96f5ff1^ffffff —Å–µ–∫. –≤—Å–µ–º–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ^96f5ff8^ffffff –º –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –±–∞–∑–æ–≤—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω,–ø–ª—é—Å ^96f5ff110%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è, –ø–ª—é—Å ^96f5ff6406^ffffff –µ–¥. —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞.^808080–ù–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —É–º–µ–Ω–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è.–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ ESC –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–º–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.^ffa4a9–ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤ –¥–≤–∏–∂–µ–Ω–∏–∏.|if&(skilllv()+dynskilllv())>2&^ffffff–£—Ä. 3: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç —É–º–µ–Ω–∏—è '–©–∏—Ç –∂–∏–∑–Ω–∏', '–ë—Ä–æ—Å–æ–∫ —â–∏—Ç–∞','–©–∏—Ç –¥—É—Ö–æ–≤', '–©–∏—Ç —Å–µ—Ä–¥—Ü–∞' –∏ '–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π —â–∏—Ç'.–¢–∞–∫–∂–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è ^96f5ff50^ffffff –µ–¥. —ç–Ω–µ—Ä–≥–∏–∏ —â–∏—Ç–∞.&^808080–£—Ä. 3: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç —É–º–µ–Ω–∏—è '–©–∏—Ç –∂–∏–∑–Ω–∏', '–ë—Ä–æ—Å–æ–∫ —â–∏—Ç–∞','–©–∏—Ç –¥—É—Ö–æ–≤', '–©–∏—Ç —Å–µ—Ä–¥—Ü–∞' –∏ '–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π —â–∏—Ç'.–¢–∞–∫–∂–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 50 –µ–¥. —ç–Ω–µ—Ä–≥–∏–∏ —â–∏—Ç–∞.|"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL5111 
#define __CPPGEN_GNET_SKILL5111 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill5111:public Skill 
    { 
    public: 
        enum { SKILL_ID = 5111 }; 
        Skill5111 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill5111Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 600;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return skill->GetRand () < 5;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 100;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPerform (2);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1500;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return skill->GetPlayer ()->GetMp () > 279 && skill->GetSection () < (skill->GetLevel () == 1 ? 8 : 16);
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetSection (skill->GetSection () + 1);
                skill->GetPlayer ()->SetDecmp (278);
                skill->SetPlus (6406);
                skill->SetRatio (4.3);
                skill->SetDamage (skill->GetAttack ());
                skill->GetPlayer ()->SetCombat (1);
                skill->GetPlayer ()->SetPerform (0);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State4:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill5111Stub ():SkillStub (5111) 
    { 
        cls                 = 13; 
#ifdef _SKILL_CLIENT 
        name                = L"¥¥ ¿°§≈≠¬Ì±º¿Ω"; 
        nativename          = "¥¥ ¿°§≈≠¬Ì±º¿Ω"; 
        icon                = "¥¥ ¿≈≠¬Ì±º¿Ω.dds"; 
#endif 
        max_level           = 2; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 8; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 1; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 0; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 2; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 49982; 
        itemcostcount       = 1; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "¥¥ ¿≥Â∑Êœ›’Û_ª˜÷–.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 7; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        restrict_weapons.push_back (59830); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
        statestub.push_back (new State4 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return -1;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 300000,300000,300000,300000,300000,300000,300000,300000,300000,300000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 60736,60737,60737,60737,60737,60737,60737,60737,60737,60737 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (9);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (8);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 50);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 278,278,278,278,278,278,278,278,278,278 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format , 278, 278, 4800);
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool StateAttack (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool BlessMe (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * skill->GetSection () < 2 ? 100 : 0);
			skill->GetVictim ()->SetTime (skill->GetLevel () == 1 ? 11000 : 21000);
			skill->GetVictim ()->SetAmount (0.5); // Defesa       
            skill->GetVictim ()->SetRatio (1); // Speed	
            skill->GetVictim ()->SetUltimatePaladin (1);
            return true;
        }					
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (25);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 30;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
