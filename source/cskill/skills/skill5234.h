//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
52340  "–í–µ–ª–∏–∫–∏–π —É–¥–∞—Ä —Å—É–¥—å–∏"52341  "^ff5c00–í–µ–ª–∏–∫–∏–π —É–¥–∞—Ä —Å—É–¥—å–∏^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff–±–ª–∏–∂–Ω–∏–π –±–æ–π^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff165^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,1^ffcb4a —Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,8^ffcb4a —Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff6,0^ffcb4a —Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,1^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–µ—á –∏ —â–∏—Ç^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–•—Ä–∞–±—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–†–µ–∑–∫–∏–π —É–¥–∞—Ä –Ω–∞–Ω–æ—Å–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –±–∞–∑–æ–≤—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –ø–ª—é—Å^96f5ff8994^ffffff –µ–¥. —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.–°–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff10^ffffff —Å–µ–∫.^00ffff–≠—Ñ—Ñ–µ–∫—Ç —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–π —Ä—É–Ω—ã:@1^00ffff1-4 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^ffffff30%%^00ffff^00ffff5-7 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^ffffff40%%^00ffff^00ffff8-9 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^ffffff50%%^00ffff ^00ffff10 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^ffffff60%%^00ffff@1@2–°–Ω–∏–∂–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É —Ü–µ–ª–∏ –Ω–∞ ^ffffff%d%%^00ffff.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL5234 
#define __CPPGEN_GNET_SKILL5234 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill5234:public Skill 
    { 
    public: 
        enum { SKILL_ID = 5234 }; 
        Skill5234 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill5234Stub:public SkillStub 
    { 
    public: 
#define get_glyph(level, l1_4, l5_7, l8_9, lmax) level >= 1 && level <= 4 ? l1_4 : level >= 5 && level <= 7 ? l5_7 : level >= 8 && level <= 9 ? l8_9 : lmax; 

#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 200;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (0.2 * (171.1));
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1000;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (0.8 * (171.1));
                skill->SetPlus (8623);
                skill->SetRatio (0);
                skill->SetDamage (skill->GetAttack ());
				skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill5234Stub ():SkillStub (5234) 
    { 
        cls                 = 13; 
#ifdef _SKILL_CLIENT 
        name                = L"…Ò°§πÌ≈–ƒÊŒ‰’∂"; 
        nativename          = "…Ò°§πÌ≈–ƒÊŒ‰’∂"; 
        icon                = "…ÒπÌ≈–ƒÊŒ‰’∂¿∂.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 41; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 10; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "”∑Ê_Õª¥Ã“ªª˜_ª˜÷–01.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 3; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = " ©∑≈æ‡¿Î‘ˆº”.gfx"; 
        gfxhangpoint        = "HH_bind"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(5169, 1)); 
        pre_skills.push_back (std::pair < ID, int >(5170, 1)); 
        restrict_weapons.push_back (59830); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1000;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 6000,6000,6000,6000,6000,6000,6000,6000,6000,6000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 165,165,165,165,165,165,165,165,165,165 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, skill->GetLevel (), 171.1);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
		bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetBreak (1);
			
			skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (10200);
            skill->GetVictim ()->SetRatio (0.3);
            skill->GetVictim ()->SetDecdefence (1);
			
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
bool BlessMe (Skill * skill) const
        {            
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 3;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
