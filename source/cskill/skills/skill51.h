//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
39510  "–í–µ–ª–∏–∫–∏–π —É–¥–∞—Ä –¥—Ä–∞–∫–æ–Ω–∞"39511  "^ff5c00–í–µ–ª–∏–∫–∏–π —É–¥–∞—Ä –¥—Ä–∞–∫–æ–Ω–∞^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff–±–ª–∏–∂–Ω–∏–π –±–æ–π^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,6 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff30 ^ffcb4a—Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–±–µ–∑ –æ—Ä—É–∂–∏—è, –∫–∞—Å—Ç–µ—Ç—ã^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–•—Ä–∞–±—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–°–æ–±—Ä–∞–≤ —ç–Ω–µ—Ä–≥–∏—é –≤ –ª–∞–¥–æ–Ω—è—Ö, –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–Ω–æ—Å–∏—Ç –ø—Ä—è–º–æ–π —É–¥–∞—Ä –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º, —Å—Ç–æ—è—â–∏–º –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏–¥–æ ^96f5ff15^ffffff –º., –ø—Ä–∏—á–∏–Ω—è—è –∏–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è, –ø–ª—é—Å ^96f5ff11504^ffffff –µ–¥. —Ñ–∏–∑. —É—Ä–æ–Ω–∞.–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ ^96f5ff15^ffffff —Å–µ–∫. –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–µ ^96f5ff120%%^ffffff —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è. ^a6caf0–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ^ffffff2^a6caf0 —Ü–∏.^00ff00–≠—Ñ—Ñ–µ–∫—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–Ω—ã:@1^00ff00–°–ª–µ–¥—É—é—â–µ–µ —É–º–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏. –ï—Å–ª–∏ —É–º–µ–Ω–∏–µ —É–∂–µ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è, —Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.^00ff001-4 —É—Ä.: –≤ —Ç–µ—á–µ–Ω–∏–µ ^96f5ff4^00ff00 —Å–µ–∫. ^96f5ff–í–µ–ª–∏–∫–æ–µ –º–æ—Ä–æ–∑–Ω–æ–µ —Å–∏—è–Ω–∏–µ^00ff00 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏^00ff005-7 —É—Ä.: –≤ —Ç–µ—á–µ–Ω–∏–µ ^96f5ff5^00ff00 —Å–µ–∫. ^96f5ff–í–µ–ª–∏–∫–æ–µ –º–æ—Ä–æ–∑–Ω–æ–µ —Å–∏—è–Ω–∏–µ^00ff00 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏^00ff008-9 —É—Ä.: –≤ —Ç–µ—á–µ–Ω–∏–µ ^96f5ff6^00ff00 —Å–µ–∫. ^96f5ff–í–µ–ª–∏–∫–æ–µ –º–æ—Ä–æ–∑–Ω–æ–µ —Å–∏—è–Ω–∏–µ^00ff00 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏^00ff00 10 —É—Ä.: –≤ —Ç–µ—á–µ–Ω–∏–µ ^96f5ff7^00ff00 —Å–µ–∫. ^96f5ff–í–µ–ª–∏–∫–æ–µ –º–æ—Ä–æ–∑–Ω–æ–µ —Å–∏—è–Ω–∏–µ^00ff00 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏@1@2^00ff00–í —Ç–µ—á–µ–Ω–∏–µ ^96f5ff%d^00ff00 —Å–µ–∫. ^96f5ff–í–µ–ª–∏–∫–æ–µ –º–æ—Ä–æ–∑–Ω–æ–µ —Å–∏—è–Ω–∏–µ^00ff00 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏.–ï—Å–ª–∏ —É–º–µ–Ω–∏–µ —É–∂–µ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è, —Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL51 
#define __CPPGEN_GNET_SKILL51 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill51:public Skill 
    { 
    public: 
        enum { SKILL_ID = 51 }; 
        Skill51 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill51Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 2350;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return skill->GetRand () < 5;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1000;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill51Stub ():SkillStub (51) 
    { 
        cls                 = 127; 
#ifdef _SKILL_CLIENT 
        name                = L"∑‚”° ı"; 
        nativename          = "∑‚”° ı"; 
        icon                = ""; 
#endif 
        max_level           = 10; 
        type                = 3; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 0; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "π÷ŒÔ∂æ÷‰ ı.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1000;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (15);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 10;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 75);
            skill->GetVictim ()->SetTime (5500);
            skill->GetVictim ()->SetSealed (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (25);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
