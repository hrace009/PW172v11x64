//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
37980  "–í–µ–ª–∏–∫–∏–π –ª–µ–¥—è–Ω–æ–π —à–∏–ø"37981  "^ff5c00–í–µ–ª–∏–∫–∏–π –ª–µ–¥—è–Ω–æ–π —à–∏–ø^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff–±–ª–∏–∂–Ω–∏–π –±–æ–π^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff178^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,7 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff15,0 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,1^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–∫–∏–Ω–∂–∞–ª—ã^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú–æ—â—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω, ^96f5ff400%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å ^96f5ff5817^ffffff –µ–¥. —Ñ–∏–∑. —É—Ä–æ–Ω–∞.–°–Ω–∏–∂–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ ^96f5ff50%%^ffffff –Ω–∞ ^96f5ff5^ffffff —Å–µ–∫.–î–æ–±–∞–≤–ª—è–µ—Ç –∫ –æ–±—ã—á–Ω—ã–º –∞—Ç–∞–∫–∞–º ^96f5ff50%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ç —Å—Ç–∏—Ö–∏–∏ –≤–æ–¥—ã –Ω–∞ ^96f5ff10^ffffff —Å–µ–∫.^d618e7–£–º–µ–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –∫–æ–º–±–æ.–ü—Ä–∏ –º–∞–∫—Å–∏–º—É–º–µ –∫–æ–º–±–æ-–æ—á–∫–æ–≤ –¥–∞–µ—Ç –¥–æ–ø. ^ffffff1^d618e7 –æ—á–∫–æ –∫–æ–º–±–æ.^ffeaab–≠—Ñ—Ñ–µ–∫—Ç —Å–µ—Ä–µ–±—Ä—è–Ω–æ–π —Ä—É–Ω—ã:@1^ffeaab1-4 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç 20%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å 810 –µ–¥., –∞ —Ç–∞–∫–∂–µ –¥–æ–ø. 24%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –æ—á–∫–æ –∫–æ–º–±–æ.^ffeaab5-7 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç 30%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å 1210 –µ–¥., –∞ —Ç–∞–∫–∂–µ –¥–æ–ø. 36%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –æ—á–∫–æ –∫–æ–º–±–æ.^ffeaab8-9 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç 40%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å 1610 –µ–¥., –∞ —Ç–∞–∫–∂–µ –¥–æ–ø. 48%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –æ—á–∫–æ –∫–æ–º–±–æ.^ffeaab 10 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç 50%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å 2020 –µ–¥., –∞ —Ç–∞–∫–∂–µ –¥–æ–ø. 60%% —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –æ—á–∫–æ –∫–æ–º–±–æ.@1@2–î–æ–±–∞–≤–ª—è–µ—Ç ^96f5ff%d%%^ffeaab —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å ^96f5ff%d^ffeaab –µ–¥., –∞ —Ç–∞–∫–∂–µ –¥–æ–ø. ^96f5ff%d%%^ffeaab —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –æ—á–∫–æ –∫–æ–º–±–æ.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL798 
#define __CPPGEN_GNET_SKILL798 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill798:public Skill 
    { 
    public: 
        enum { SKILL_ID = 798 }; 
        Skill798 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill798Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 400;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 600;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetRatio (-1);
                skill->SetPlus (0.5 * (skill->GetPlayer ()->GetMaxhp () - skill->GetPlayer ()->GetHp ()));
                skill->SetDamage (skill->GetPlus ());
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill798Stub ():SkillStub (798) 
    { 
        cls                 = 127; 
#ifdef _SKILL_CLIENT 
        name                = L"∂·∆«"; 
        nativename          = "∂·∆«"; 
        icon                = "≥ËŒÔ∂·∆«.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 2; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 9405; 
        allow_forms         = 0; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "π÷ŒÔ…˙√¸Œ¸»°.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(796, 3)); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 600;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 30000,30000,30000,30000,30000,30000,30000,30000,30000,30000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 120000,120000,120000,120000,120000,120000,120000,120000,120000,120000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 80,80,80,80,80,80,80,80,80,80 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 11710,11710,11710,11710,11710,11710,11710,11710,11710,11710 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (10);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (3);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 5000;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (3000);
            skill->GetVictim ()->SetAmount (skill->GetT0 ());
            skill->GetVictim ()->SetMagicleak (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool BlessMe (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetValue (0.5 * (skill->GetPlayer ()->GetMaxhp () - skill->GetPlayer ()->GetHp ()));
            skill->GetVictim ()->SetHeal (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (10);
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetTalent0 (PlayerWrapper * player) const
        {
            return (float) (0.5 * (player->GetMaxhp () - player->GetHp ()));
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
