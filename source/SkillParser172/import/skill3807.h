/*Skill Parser (c)Deadraky 2022 
38070  "§£§Ö§Ý§Ú§Ü§Ñ§ñ §Õ§â§Ö§Ó§ß§ñ§ñ §ä§ð§â§î§Þ§Ñ"
38071  "^ff5c00§£§Ö§Ý§Ú§Ü§Ñ§ñ §Õ§â§Ö§Ó§ß§ñ§ñ §ä§ð§â§î§Þ§Ñ

^ffcb4a§¥§Ñ§Ý§î§ß§à§ã§ä§î: ^ffffff4,5 §Þ
^ffcb4a§®§Ñ§Ô. §ï§ß§Ö§â§Ô§Ú§ñ: ^96f5ff290
^ffcb4a§±§à§Õ§Ô§à§ä§à§Ó§Ü§Ñ: ^ffffff0,4 ^ffcb4a§ã§Ö§Ü.
§±§â§Ú§Þ§Ö§ß§Ö§ß§Ú§Ö: ^ffffff2,5 ^ffcb4a§ã§Ö§Ü.
§±§Ö§â§Ö§Ù§Ñ§â§ñ§Õ§Ü§Ñ: ^ffffff30,0 ^ffcb4a§ã§Ö§Ü.
§°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§Ö §á§à §à§â§å§Ø§Ú§ð: ^ffffff§Ü§Ú§ß§Ø§Ñ§Ý§í
^ffcb4a§·§Ñ§â§Ñ§Ü§ä§Ö§â§Ú§ã§ä§Ú§Ü§Ñ: ^ff5c00§®§å§Õ§â§à§ã§ä§î

^ffcb4a§³§ä§Ñ§ä§å§ã: ^ffffff§®§å§Õ§â§Ö§è
§³§ä§â§Ñ§ê§ß§í§Û §å§Õ§Ñ§â §à§Ô§Ý§å§ê§Ñ§Ö§ä §á§â§à§ä§Ú§Ó§ß§Ú§Ü§Ñ §ß§Ñ ^96f5ff6^ffffff §ã§Ö§Ü.
§Ú §ß§Ñ§ß§à§ã§Ú§ä §Ö§Þ§å ^96f5ff2-§Ü§â§Ñ§ä§ß§í§Û^ffffff §Ò§Ñ§Ù§à§Ó§í§Û §æ§Ú§Ù. §å§â§à§ß,
^96f5ff375%%^ffffff §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ §Ú ^96f5ff7497^ffffff §Ö§Õ. §æ§Ú§Ù. §å§â§à§ß§Ñ.
§¯§Ñ ^96f5ff10^ffffff §ã§Ö§Ü. §ã§ß§Ú§Ø§Ñ§Ö§ä §ã§Ü§à§â§à§ã§ä§î §á§Ö§â§Ö§Þ§Ö§ë§Ö§ß§Ú§ñ §á§â§à§ä§Ú§Ó§ß§Ú§Ü§Ñ §ß§Ñ 60%%.

^a6caf0§¥§à§á§à§Ý§ß§Ú§ä§Ö§Ý§î§ß§Ñ§ñ §ã§ä§à§Ú§Þ§à§ã§ä§î: ^ffffff2,0^a6caf0 §è§Ú.
§±§à§ã§Ý§Ö §á§â§Ú§Þ§Ö§ß§Ö§ß§Ú§ñ §Ó§à§ã§ã§ä§Ñ§ß§Ñ§Ó§Ý§Ú§Ó§Ñ§Ö§ä§ã§ñ 0,5 §è§Ú.

^d618e7§µ§Þ§Ö§ß§Ú§Ö §å§ã§Ú§Ý§Ú§Ó§Ñ§Ö§ä§ã§ñ §Ó §ã§à§à§ä§Ó§Ö§ä§ã§ä§Ó§Ú§Ú §ã §Ü§à§Ý-§Þ §á§à§ä§â§Ñ§é§Ö§ß§ß§í§ç §à§é§Ü§à§Ó §Ü§à§Þ§Ò§à.
§±§â§Ú §Þ§Ñ§Ü§ã§Ú§Þ§å§Þ§Ö §Ü§à§Þ§Ò§à-§à§é§Ü§à§Ó §Õ§Ñ§Ö§ä §Õ§à§á. 1 §à§é§Ü§à §Ü§à§Þ§Ò§à.

^00ff00§¿§æ§æ§Ö§Ü§ä §Ú§Ù§å§Þ§â§å§Õ§ß§à§Û §â§å§ß§í:@1
^00ff001-4 §å§â.: §Õ§à§á. §ß§Ñ§ß§à§ã§Ú§ä ^96f5ff240%%^00ff00 §Ò§Ñ§Ù§à§Ó§à§Ô§à §æ§Ú§Ù. §å§â§à§ß§Ñ
§á§Ý§ð§ã ^96f5ff6%%^00ff00 §Ù§Ñ §Ü§Ñ§Ø§Õ§à§Ö §á§à§ä§â§Ñ§é§Ö§ß§ß§à§Ö §à§é§Ü§à §Ü§à§Þ§Ò§à.
^00ff005-7 §å§â.: §Õ§à§á. §ß§Ñ§ß§à§ã§Ú§ä ^96f5ff260%%^00ff00 §Ò§Ñ§Ù§à§Ó§à§Ô§à §æ§Ú§Ù. §å§â§à§ß§Ñ
§á§Ý§ð§ã ^96f5ff9%%^00ff00 §Ù§Ñ §Ü§Ñ§Ø§Õ§à§Ö §á§à§ä§â§Ñ§é§Ö§ß§ß§à§Ö §à§é§Ü§à §Ü§à§Þ§Ò§à.
^00ff008-9 §å§â.: §Õ§à§á. §ß§Ñ§ß§à§ã§Ú§ä ^96f5ff280%%^00ff00 §Ò§Ñ§Ù§à§Ó§à§Ô§à §æ§Ú§Ù. §å§â§à§ß§Ñ
§á§Ý§ð§ã ^96f5ff12%%^00ff00 §Ù§Ñ §Ü§Ñ§Ø§Õ§à§Ö §á§à§ä§â§Ñ§é§Ö§ß§ß§à§Ö §à§é§Ü§à §Ü§à§Þ§Ò§à.
^00ff00 10 §å§â.: §Õ§à§á. §ß§Ñ§ß§à§ã§Ú§ä ^96f5ff300%%^00ff00 §Ò§Ñ§Ù§à§Ó§à§Ô§à §æ§Ú§Ù. §å§â§à§ß§Ñ
§á§Ý§ð§ã ^96f5ff15%%^00ff00 §Ù§Ñ §Ü§Ñ§Ø§Õ§à§Ö §á§à§ä§â§Ñ§é§Ö§ß§ß§à§Ö §à§é§Ü§à §Ü§à§Þ§Ò§à.@1@2
§¯§Ñ§ß§à§ã§Ú§ä ^96f5ff%d%%^00ff00 §Ò§Ñ§Ù§à§Ó§à§Ô§à §æ§Ú§Ù. §å§â§à§ß§Ñ
§á§Ý§ð§ã ^96f5ff%d%%^00ff00 §Ù§Ñ §Ü§Ñ§Ø§Õ§à§Ö §á§à§ä§â§Ñ§é§Ö§ß§ß§à§Ö §à§é§Ü§à §Ü§à§Þ§Ò§à.@2"
*/
#ifndef __CPPGEN_GNET_SKILL3807 
#define __CPPGEN_GNET_SKILL3807 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill3807:public Skill 
    { 
    public: 
        enum { SKILL_ID = 3807 }; 
        Skill3807 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill3807Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 400;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (90);
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 50;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (200);
                skill->GetPlayer ()->SetPerform (2);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 450;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetSection (1);
                skill->SetPlus (14994);
                skill->SetRatio (7.5);
                skill->SetDamage (0.25 * skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (0);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State4:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 300;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetSection (2);
                skill->SetPlus (14994);
                skill->SetRatio (7.5);
                skill->SetDamage (0.1 * skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (0);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State5:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 500;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetSection (3);
                skill->SetPlus (14994);
                skill->SetRatio (7.5);
                skill->SetDamage (0.15 * skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (0);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State6:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1250;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->SetSection (4);
                skill->SetPlus (14994);
                skill->SetRatio (7.5);
                skill->SetDamage (0.5 * skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (0);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State7:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill3807Stub ():SkillStub (3807) 
    { 
        cls                 = 5; 
        name                = L"Éñ¡¤ÉñÍþÓü"; 
        nativename          = "Éñ¡¤ÉñÍþÓü"; 
        icon                = "Éñ¡¤ÉñÍþÓüºìÂÌ.dds"; 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 41; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1622; 
        allow_forms         = 1; 
        apcost              = 200; 
        apgain              = 50; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
        effect              = "´Ì¿Í_Ê®×ÖÕ¶.sgc"; 
        aerial_effect       = ""; 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 2; 
        gfxfilename         = "ÏûºÄÁ¬»÷µã»ñµÃÊÕÒæ.gfx"; 
        gfxhangpoint        = "HH_spine"; 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        restrict_weapons.push_back (23749); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
        statestub.push_back (new State4 ()); 
        statestub.push_back (new State5 ()); 
        statestub.push_back (new State6 ()); 
        statestub.push_back (new State7 ()); 
#endif 
    } 
    int GetExecutetime (Skill * skill) const 
    { 
        static int aarray[10] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 30000,30000,30000,30000,30000,30000,30000,30000,30000,30000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 11208,11208,11208,11208,11208,11208,11208,11208,11208,11208 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    float GetRadius (Skill * skill) const
    {
            return (float) (0);
        }
    float GetAttackdistance (Skill * skill) const
    {
            return (float) (0);
        }
    float GetAngle (Skill * skill) const
    {
            return (float) (1 - 0.0111111 * (0));
        }
    float GetPraydistance (Skill * skill) const
    {
            return (float) (4.5);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 290,290,290,290,290,290,290,290,290,290 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
    int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetEnmity (Skill * skill) const
        {
            return 0;
        }    
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
		bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * (skill->GetSection () == 1 ? 100 : 0));
            skill->GetVictim ()->SetTime (6000);
            skill->GetVictim ()->SetDizzy (1);
            skill->GetVictim ()->SetProbability (1.0 * (skill->GetSection () == 1 ? 100 : 0));
            skill->GetVictim ()->SetTime (10000);
            skill->GetVictim ()->SetRatio (0.6);
            skill->GetVictim ()->SetSlow (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
bool BlessMe (Skill * skill) const
        {            
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (12);
        }		
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (4);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
