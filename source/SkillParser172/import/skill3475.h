/*Skill Parser (c)Deadraky 2022 
rune effect by serega62rus
34750  "§£§Ö§İ§Ú§Ü§Ú§Û §å§Õ§Ñ§â §Ş§à§İ§ß§Ú§Ú"
34751  "^ff5c00§£§Ö§İ§Ú§Ü§Ú§Û §å§Õ§Ñ§â §Ş§à§İ§ß§Ú§Ú

^ffcb4a§¥§Ñ§İ§î§ß§à§ã§ä§î: ^ffffff§Õ§Ñ§İ§î§ß§ñ§ñ §Ñ§ä§Ñ§Ü§Ñ
^ffcb4a§®§Ñ§Ô. §ï§ß§Ö§â§Ô§Ú§ñ: ^96f5ff%d^ffffff
^ffcb4a§±§à§Õ§Ô§à§ä§à§Ó§Ü§Ñ: ^ffffff0,5 ^ffcb4a§ã§Ö§Ü.
^ffcb4a§±§â§Ú§Ş§Ö§ß§Ö§ß§Ú§Ö: ^ffffff0,8 ^ffcb4a§ã§Ö§Ü.
^ffcb4a§±§Ö§â§Ö§Ù§Ñ§â§ñ§Õ§Ü§Ñ: ^ffffff8,0 ^ffcb4a§ã§Ö§Ü.
^ffcb4a§±§à§İ§å§é§Ö§ß§Ú§Ö §è§Ú: ^ffffff0,15
^ffcb4a§°§Ô§â§Ñ§ß§Ú§é§Ö§ß§Ú§Ö §á§à §à§â§å§Ø§Ú§ğ: ^ffffff§à§â§å§Ø§Ú§Ö §Õ§Ñ§İ§î§ß§Ö§Ô§à §Ò§à§ñ
^ffcb4a§·§Ñ§â§Ñ§Ü§ä§Ö§â§Ú§ã§ä§Ú§Ü§Ñ: ^ff5c00§®§à§ë§î

^ffcb4a§³§ä§Ñ§ä§å§ã: ^ffffff§®§å§Õ§â§Ö§è
§±§à§â§Ñ§Ø§Ñ§Ö§ä §á§â§à§ä§Ú§Ó§ß§Ú§Ü§Ñ §å§Õ§Ñ§â§à§Ş §Ş§à§İ§ß§Ú§Ú. §¯§Ñ§ß§à§ã§Ú§ä §å§â§à§ß §ã§ä§Ú§ç§Ú§Ö§Û §Ş§Ö§ä§Ñ§İ§İ§Ñ, §â§Ñ§Ó§ß§í§Û §Ò§Ñ§Ù§à§Ó§à§Ş§å §æ§Ú§Ù§Ú§é§Ö§ã§Ü§à§Ş§å §å§â§à§ß§å,
§á§İ§ğ§ã ^96f5ff150%%^ffffff §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ §á§İ§ğ§ã ^96f5ff7588^ffffff §Ö§Õ. §å§â§à§ß§Ñ §ã§ä§Ú§ç§Ú§Ö§Û §Ş§Ö§ä§Ñ§İ§İ§Ñ.
§¯§Ö §á§â§à§Ş§Ñ§ç§Ú§Ó§Ñ§Ö§ä§ã§ñ.

^a6caf0§´§â§Ö§Ò§å§Ö§ä§ã§ñ: ^ffffff1^a6caf0 §ã§ä§â§Ö§İ§Ñ §Ú§İ§Ú §ã§ß§Ñ§â§ñ§Õ.

^ffcb4a§¿§æ§æ§Ö§Ü§ä §Ù§à§İ§à§ä§à§Û §â§å§ß§í:@1
^ffcb4a1-4 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff20%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
^ffcb4a5-7 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff30%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
^ffcb4a8-9 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff40%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
^ffcb4a 10 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff50%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ@1@2
§¥§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff%d%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ.@2"
*/
#ifndef __CPPGEN_GNET_SKILL3475 
#define __CPPGEN_GNET_SKILL3475 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill3475:public Skill 
    { 
    public: 
        enum { SKILL_ID = 3475 }; 
        Skill3475 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill3475Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1000;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (67);
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 800;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (268);
                skill->SetPlus (7588);
				
				/*
				^ffcb4a1-4 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff20%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
				^ffcb4a5-7 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff30%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
				^ffcb4a8-9 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff40%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
				^ffcb4a 10 §å§â.: §Õ§à§Ò§Ñ§Ó§İ§ñ§Ö§ä§ã§ñ ^96f5ff50%%^ffcb4a §å§â§à§ß§Ñ §à§â§å§Ø§Ú§ñ
				*/
				static const float LEVEL_1_4 = 0.2;
				static const float LEVEL_5_7 = 0.3;
				static const float LEVEL_8_9 = 0.4;
				static const float LEVEL_10_10 = 0.5;
				static float aarray[10] = { LEVEL_1_4, LEVEL_1_4, LEVEL_1_4, LEVEL_1_4, LEVEL_5_7, LEVEL_5_7, LEVEL_5_7, LEVEL_8_9, LEVEL_8_9, LEVEL_10_10 };						
                skill->SetRatio (1.5 + ( aarray[skill->GetLevel () - 1] ));
                skill->SetGolddamage (skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill3475Stub ():SkillStub (3475) 
    { 
        cls                 = 6; 
        name                = L"Éñ¡¤ÂäÀ×"; 
        nativename          = "Éñ¡¤ÂäÀ×"; 
        icon                = "Éñ¡¤ÂäÀ×»Æ.dds"; 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 7; 
        rank                = 41; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1308; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 15; 
        doenchant           = 0; 
        dobless             = 0; 
        arrowcost           = 1; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
        effect              = "2ÂäÀ×.sgc"; 
        aerial_effect       = ""; 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 1; 
        gfxfilename         = "Ö±½ÓÉËº¦Ôö¼Ó1.gfx"; 
        gfxhangpoint        = "HH_bind"; 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        restrict_weapons.push_back (13); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
    int GetExecutetime (Skill * skill) const 
    { 
        static int aarray[10] = { 800,800,800,800,800,800,800,800,800,800 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 8000,8000,8000,8000,8000,8000,8000,8000,8000,8000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 11208,11208,11208,11208,11208,11208,11208,11208,11208,11208 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    float GetRadius (Skill * skill) const
    {
            return (float) (8 + 0.4 * skill->GetLevel ());
        }
    float GetAttackdistance (Skill * skill) const
    {
            return (float) (0);
        }
    float GetAngle (Skill * skill) const
    {
            return (float) (1 - 0.0111111 * (0));
        }
    float GetPraydistance (Skill * skill) const
    {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 335,335,335,335,335,335,335,335,335,335 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
    int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetEnmity (Skill * skill) const
        {
            return 0;
        }    
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
		bool StateAttack (Skill * skill) const
        {            
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
bool BlessMe (Skill * skill) const
        {            
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 5);
        }		
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.5);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
