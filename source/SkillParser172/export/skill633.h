//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
36330  "–í–µ–ª–∏–∫–∏–µ –æ–∫–æ–≤—ã –ª—å–¥–∞"36331  "^ff5c00–í–µ–ª–∏–∫–∏–µ –æ–∫–æ–≤—ã –ª—å–¥–∞^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff28,5^ffffff ^ffcb4a–º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff560^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff1,5 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1,0 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff8 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,15^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú—É–¥—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ê—Å—É—Ä–∞–û—Å—ã–ø–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ ^96f5ff6^ffffff –º –ª–µ–¥—è–Ω—ã–º–∏ –æ—Å–∫–æ–ª–∫–∞–º–∏, –Ω–∞–Ω–æ—Å—è–±–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff200%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è,–ø–ª—é—Å ^96f5ff8322^ffffff –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –≤–æ–¥—ã. –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ^96f5ff75%%^ffffff–æ–±–µ–∑–¥–≤–∏–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–∞ ^96f5ff5^ffffff —Å–µ–∫.^00ffff–≠—Ñ—Ñ–µ–∫—Ç —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–π —Ä—É–Ω—ã:@1^00ffff1-4 —É—Ä.: —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ^ffffff7^00ffff –º^00ffff5-7 —É—Ä.: —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ^ffffff8^00ffff –º^00ffff8-9 —É—Ä.: —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ^ffffff9^00ffff –º^00ffff 10 —É—Ä.: —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ^ffffff10^00ffff –º@1@2–†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ^ffffff%d^00ffff –º.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL633 
#define __CPPGEN_GNET_SKILL633 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill633:public Skill 
    { 
    public: 
        enum { SKILL_ID = 633 }; 
        Skill633 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill633Stub:public SkillStub 
    { 
    public: 
    Skill633Stub ():SkillStub (633) 
    { 
        cls                 = 6; 
#ifdef _SKILL_CLIENT 
        name                = L"øÒ°§π≠ÂÛæ´Õ®"; 
        nativename          = "øÒ°§π≠ÂÛæ´Õ®"; 
        icon                = "π≠ÂÛæ´Õ®2.dds"; 
#endif 
        max_level           = 1; 
        type                = 5; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 30; 
        eventflag           = 2; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1324; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 0; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = ""; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(256, 10)); 
        restrict_weapons.push_back (13); 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 0;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 92,92,92,92,92,92,92,92,92,92 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, 75);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool StateAttack (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 5);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {
            skill->GetPlayer ()->SetIncbow (0.15);
            skill->GetPlayer ()->SetInccrit (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
