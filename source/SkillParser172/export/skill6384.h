//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
63840  "–í–µ–ª–∏–∫–∞—è –ª–∏–Ω–∏—è –æ–≥–Ω—è"63841  "^ff5c00–í–µ–ª–∏–∫–∞—è –ª–∏–Ω–∏—è –æ–≥–Ω—è^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^ffffff–¥–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff225^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,6 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff5,0 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,2^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff—Ä—É—á–Ω–∞—è –ø—É—à–∫–∞^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–•—Ä–∞–±—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–ü–ª–∞–º—è –ø–æ–ª—ã—Ö–∞–µ—Ç —Å—Ç–µ–Ω–æ–π, –¥—ã–º –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –°—Ç—Ä–µ–ª–æ–∫ –ø–æ—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–∞ –ª–∏–Ω–∏–∏—à–∏—Ä–∏–Ω–æ–π ^96f5ff5^ffffff –º, –Ω–∞–Ω–æ—Å—è –∏–º —É—Ä–æ–Ω —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è, —Ä–∞–≤–Ω—ã–π –±–∞–∑–æ–≤–æ–º—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —É—Ä–æ–Ω—É, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞–æ—Ä—É–∂–∏—è, –ø–ª—é—Å ^96f5ff3525^ffffff –µ–¥. –ó–∞—â–∏—Ç–∞ —Ü–µ–ª–µ–π –æ—Ç —Å—Ç–∏—Ö–∏–∏ –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff60%%^ffffff –Ω–∞ ^96f5ff15^ffffff —Å–µ–∫.–ö–∞–∂–¥–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —É–º–µ–Ω–∏—è ^96f5ff'–í–µ–ª–∏–∫–∏–µ –¥–µ–≤—è—Ç—å —Å–æ–ª–Ω—Ü'^ffffff –Ω–∞ ^96f5ff0,5^ffffff —Å–µ–∫.^ffffff–≠—Ñ—Ñ–µ–∫—Ç –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —É–º–µ–Ω–∏–µ ^96f5ff'–í–µ–ª–∏–∫–∏–µ –¥–µ–≤—è—Ç—å —Å–æ–ª–Ω—Ü' —Å —Å–µ—Ä–µ–±—Ä—è–Ω–æ–π —Ä—É–Ω–æ–π^ffffff.^ff0000–≠—Ñ—Ñ–µ–∫—Ç —Ä—É–±–∏–Ω–æ–≤–æ–π —Ä—É–Ω—ã:@1^ff00001-4 —É—Ä.: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff65%%^ff0000^ff00005-7 —É—Ä.: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff70%%^ff0000^ff00008-9 —É—Ä.: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff75%%^ff0000^ff0000 10 —É—Ä.: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff80%%^ff0000@1@2^ff0000–ó–∞—â–∏—Ç–∞ —Ü–µ–ª–µ–π –æ—Ç —Å—Ç–∏—Ö–∏–∏ –æ–≥–Ω—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff%d%%^ff0000.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL6384 
#define __CPPGEN_GNET_SKILL6384 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill6384:public Skill 
    { 
    public: 
        enum { SKILL_ID = 6384 }; 
        Skill6384 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill6384Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 200;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (0.2 * (198));
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1100;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (0.8 * (198));
                skill->SetPlus (3525);
                skill->SetRatio (1.0);
                skill->SetFiredamage (skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill6384Stub ():SkillStub (6384) 
    { 
        cls                 = 12; 
#ifdef _SKILL_CLIENT 
        name                = L"…Ò°§∞Ÿ¿Ô≥„—Ê"; 
        nativename          = "…Ò°§∞Ÿ¿Ô≥„—Ê"; 
        icon                = "…Ò∞Ÿ¿Ô≥„—Ê∫Ï.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 41; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1040; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 20; 
        doenchant           = 1; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "…Òª˙_ªœµ…À∫¶÷±œﬂ»∫_ª˜÷–.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 1; 
        has_stateattack     = 0; 
        runes_attr          = 3; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 1301; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(4998, 1)); 
        pre_skills.push_back (std::pair < ID, int >(4999, 1)); 
        restrict_weapons.push_back (59831); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1100;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 5000,5000,5000,5000,5000,5000,5000,5000,5000,5000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000,50000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 11208,11208,11208,11208,11208,11208,11208,11208,11208,11208 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (5);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 225,225,225,225,225,225,225,225,225,225 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
		bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (16000);
            skill->GetVictim ()->SetRatio (0.6);
            skill->GetVictim ()->SetReducefire (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
		bool BlessMe (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 25);
            skill->GetVictim ()->SetValue (20);
            skill->GetVictim ()->SetAp (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 5);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 3;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
