//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
36260  "–í–µ–ª–∏–∫–∏–π –≤–æ–¥–Ω—ã–π —É–¥–∞—Ä"36261  "^ff5c00–í–µ–ª–∏–∫–∏–π –≤–æ–¥–Ω—ã–π —É–¥–∞—Ä^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff28,5^ffffff^ffcb4a –º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff320^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,5 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1,2 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff2 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,1^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú—É–¥—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–ù–∞–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è,–ø–ª—é—Å ^96f5ff3573^ffffff –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –≤–æ–¥—ã. –°–Ω–∏–∂–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ ^96f5ff50%%^ffffff –Ω–∞ ^96f5ff8^ffffff —Å–µ–∫.–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ^96f5ff20%%^ffffff —Å–Ω–∏–∂–∞–µ—Ç —Ü–∏ —Ü–µ–ª–∏ –Ω–∞ ^96f5ff0,3^ffffff.–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –Ω–∞ ^96f5ff15%%^ffffff.^00ff00–≠—Ñ—Ñ–µ–∫—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–Ω—ã:@1^00ff001-4 —É—Ä.: —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff60%%^00ff00^00ff005-7 —É—Ä.: —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff65%%^00ff00^00ff008-9 —É—Ä.: —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff70%%^00ff00^00ff00 10 —É—Ä.: —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff75%%^00ff00@1@2–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff%d%%^00ff00.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL626 
#define __CPPGEN_GNET_SKILL626 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill626:public Skill 
    { 
    public: 
        enum { SKILL_ID = 626 }; 
        Skill626 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill626Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1000;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (89);
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1000;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (356);
                skill->SetPlus (4347);
                skill->SetRatio (0);
                skill->SetDamage (skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill626Stub ():SkillStub (626) 
    { 
        cls                 = 6; 
#ifdef _SKILL_CLIENT 
        name                = L"’Ê°§“Ì’π"; 
        nativename          = "’Ê°§“Ì’π"; 
        icon                = "“Ì’π1.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 20; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1319; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 10; 
        doenchant           = 1; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "1“Ì’π.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 2; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(251, 10)); 
        restrict_weapons.push_back (13); 
        restrict_weapons.push_back (1); 
        restrict_weapons.push_back (5); 
        restrict_weapons.push_back (9); 
        restrict_weapons.push_back (182); 
        restrict_weapons.push_back (291); 
        restrict_weapons.push_back (292); 
        restrict_weapons.push_back (0); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 900;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 6000,6000,6000,6000,6000,6000,6000,6000,6000,6000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 92,92,92,92,92,92,92,92,92,92 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (10);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (5);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 445,445,445,445,445,445,445,445,445,445 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, 445, 4347, 9);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetValue (9);
            skill->GetVictim ()->SetRepel (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool BlessMe (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 20);
            skill->GetVictim ()->SetValue (50);
            skill->GetVictim ()->SetAp (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 5);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 9;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.5);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
