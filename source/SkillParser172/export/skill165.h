//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
51650  "–°–≤–µ—Ç–ª—ã–π –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π —â–∏—Ç"51651  "^8080ff–°–≤–µ—Ç–ª—ã–π –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π —â–∏—Ç^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff185,6^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff–º–≥–Ω–æ–≤–µ–Ω–Ω–æ ^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff90 ^ffcb4a —Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–µ—á –∏ —â–∏—Ç, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ü—Ä–æ—Å–≤–µ—â–µ–Ω–Ω—ã–π–≠–Ω–µ—Ä–≥–∏—è —â–∏—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π –±–ª–µ—Å–∫. –í —Ç–µ—á–µ–Ω–∏–µ ^96f5ff8^ffffff —Å–µ–∫.–æ—Ç—Ä–∞–∂–∞–µ—Ç –¥–æ ^96f5ff3^ffffff –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç —É–º–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.–ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –ø–æ–¥ –∞—Ç–∞–∫—É –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–º —É–º–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫,–∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–º–µ–Ω–∏—è.^FFFF00–ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.^a6caf0–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ^ffffff100^a6caf0 –µ–¥. —ç–Ω–µ—Ä–≥–∏–∏ —â–∏—Ç–∞.^f7dfa5–û—Ç—Ä–∞–∂–∞–µ—Ç –¥–æ ^96f5ff4^f7dfa5 –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤."*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL165 
#define __CPPGEN_GNET_SKILL165 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill165:public Skill 
    { 
    public: 
        enum { SKILL_ID = 165 }; 
        Skill165 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill165Stub:public SkillStub 
    { 
    public: 
    Skill165Stub ():SkillStub (165) 
    { 
        cls                 = 255; 
#ifdef _SKILL_CLIENT 
        name                = L" ±◊∞æ´Õ®"; 
        nativename          = " ±◊∞æ´Õ®"; 
        icon                = " ±◊∞æ´Õ®.dds"; 
#endif 
        max_level           = 5; 
        type                = 7; 
        allow_ride          = 0; 
        attr                = 0; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 4002; 
        allow_forms         = 0; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 0; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = ""; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
#ifdef _SKILL_SERVER 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 0;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 150,150,150,150,150,150,150,150,150,150 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 4219,4222,4223,4224,4225,4225,4225,4225,4225,4225 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000,5000,30000,62000,100000,100000,100000,100000,100000,100000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (0);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, skill->GetLevel (), skill->GetAbility (), skill->GetMaxability (), skill->GetLevel ());

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetMaxAbility (Skill * skill) const
        {
            static int array[10] = { 10, 20, 30, 40, 50 };
            return array[skill->GetLevel () - 1];
        }
#endif 
#ifdef _SKILL_SERVER 
    bool StateAttack (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (0);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
