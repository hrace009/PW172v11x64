//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
49540  "–î—Ä–∞–∫–æ–Ω—å—è –∏–ª–ª—é–∑–∏—è"49541  "^ff0000–î—Ä–∞–∫–æ–Ω—å—è –∏–ª–ª—é–∑–∏—è –£—Ä–æ–≤–µ–Ω—å %d|if&dynskilllv()>0&^ffcb4a +%d&|^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff225^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff0,1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,9 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff300 ^ffcb4a—Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff—Ä—É—á–Ω–∞—è –ø—É—à–∫–∞^ffcb4a–†–∞—Å—Ö–æ–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ^96f5ff–ñ–∏–≤–∞—è –¥—É—à–∞^ffffff^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ë–ª–∞–≥–æ—á–µ—Å—Ç–∏–≤—ã–π–ù–∞ ^96f5ff|if&(skilllv()+dynskilllv())<2&10&20|^ffffff —Å–µ–∫. —Å—Ç—Ä–µ–ª–æ–∫ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –¥—Ä–∞–∫–æ–Ω–∞-–¥–≤–æ–π–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç—É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞—Ç–∞–∫–∏ —Å—Ç—Ä–µ–ª–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff%d^ffffff.–î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø—Ä–µ—Å–ª–µ–¥—É–µ–º—ã–π –≤—Ä–∞–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∞—Ç–∞–∫–∏, –≤—Å–µ —É–º–µ–Ω–∏—è,–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–µ–ª–∫–æ–º –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π, –¥–≤–æ–π–Ω–∏–∫ –æ–±—Ä–∞—Ç–∏—Ç –∏ –Ω–∞ —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞.–ï—Å–ª–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–º–µ–Ω–∏–π –∑–æ–Ω—ã –ø–æ—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∞ –∏ –µ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞–ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –æ–Ω –æ–¥–Ω–æ–º–æ–º–µ–Ω—Ç–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç –≤—Å–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω.|if&(skilllv()+dynskilllv())>2&^ffffff–£—Ä. 3: –ö–∞–∂–¥—ã–µ ^96f5ff3^ffffff —Å–µ–∫. —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–≤–æ–π–Ω–∏–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã. &^808080–£—Ä. 3: –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫. —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–≤–æ–π–Ω–∏–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.|"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL4954 
#define __CPPGEN_GNET_SKILL4954 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill4954:public Skill 
    { 
    public: 
        enum { SKILL_ID = 4954 }; 
        Skill4954 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill4954Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 100;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 900;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill4954Stub ():SkillStub (4954) 
    { 
        cls                 = 12; 
#ifdef _SKILL_CLIENT 
        name                = L"¥¥ ¿°§Ú◊”∞«ßª√"; 
        nativename          = "¥¥ ¿°§Ú◊”∞«ßª√"; 
        icon                = "¥¥ ¿Ú◊”∞«ßª√.dds"; 
#endif 
        max_level           = 2; 
        type                = 3; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 8; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1020; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 1; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 49982; 
        itemcostcount       = 1; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "¥¥ ¿À´∑¢_ª˜÷–.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = ""; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
        restrict_weapons.push_back (59831); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 900;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 300000,300000,300000,300000,300000,300000,300000,300000,300000,300000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 60789,60790,60790,60790,60790,60790,60790,60790,60790,60790 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 360,360,360,360,360,360,360,360,360,360 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {              
            skill->GetVictim ()->SetProbability (1.0 * 100); // Praga
            skill->GetVictim ()->SetTime (11000);
            skill->GetVictim ()->SetRatio (2);
            skill->GetVictim ()->SetValue (20);
            skill->GetVictim ()->SetAddPraga (1);
            return true;
        }	
#endif 
#ifdef _SKILL_SERVER 
        bool BlessMe (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100); // Aumenta o N√≠vel de Ataque
            skill->GetVictim ()->SetTime (11000);
            skill->GetVictim ()->SetValue (50);
            skill->GetVictim ()->SetAttackplusAtr (1);
            return true;
        }	
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 2);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 3;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1 + 0.05 * skill->GetLevel ());
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
