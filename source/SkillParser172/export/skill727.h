//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
37270  "–í–µ–ª–∏–∫–∏–π –º—É—Ä–∞–≤—å–∏–Ω—ã–π —Ä–æ–π"37271  "^ff5c00–í–µ–ª–∏–∫–∏–π –º—É—Ä–∞–≤—å–∏–Ω—ã–π —Ä–æ–π^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff%d^ffffff ^ffcb4a–º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff2,5 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff0,8 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff5,0 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: ^ffffff0,2^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥. –æ—Ä—É–∂–∏–µ, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú—É–¥—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–æ–ª—á–∏—â–∞ –º—É—Ä–∞–≤—å–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∞—Ç–∞–∫—É—é—Ç —Ü–µ–ª—å –∏ –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ ^96f5ff9^ffffff –º. –æ—Ç –Ω–µ–µ.–ù–∞–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff200%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è, –ø–ª—é—Å ^96f5ff3054^ffffff –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –¥–µ—Ä–µ–≤–∞.–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è–¥–æ–≤–∏—Ç—ã–µ —É–∫—É—Å—ã –∑–∞ ^96f5ff9^ffffff —Å–µ–∫. –Ω–∞–Ω–æ—Å—è—Ç –∂–µ—Ä—Ç–≤–µ –µ—â–µ ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –ø–ª—é—Å ^96f5ff3054^ffffff –µ–¥. —É—Ä–æ–Ω–∞ —Å—Ç–∏—Ö–∏–µ–π –¥–µ—Ä–µ–≤–∞.^ffcb4a–≠—Ñ—Ñ–µ–∫—Ç –∑–æ–ª–æ—Ç–æ–π —Ä—É–Ω—ã:@1^ffcb4a1-4 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff40%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è^ffcb4a5-7 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff60%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è^ffcb4a8-9 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff80%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è^ffcb4a 10 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff100%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è@1@2^ffcb4a–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff%d%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL727 
#define __CPPGEN_GNET_SKILL727 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill727:public Skill 
    { 
    public: 
        enum { SKILL_ID = 727 }; 
        Skill727 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill727Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill727Stub ():SkillStub (727) 
    { 
        cls                 = 127; 
#ifdef _SKILL_CLIENT 
        name                = L"ŒÔ∆∑ººƒ‹-Œ¸ ’…À∫¶“©º¡"; 
        nativename          = "ŒÔ∆∑ººƒ‹-Œ¸ ’…À∫¶“©º¡"; 
        icon                = ""; 
#endif 
        max_level           = 5; 
        type                = 4; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 0; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 1; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "œ… ÿ∑˚.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 5; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 0;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 1,2,3,4,5,5,5,5,5,5 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (0);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetTime (180000);
            skill->GetVictim ()->SetAmount (1000 * skill->GetLevel ());
            skill->GetVictim ()->SetValue (0);
            skill->GetVictim ()->SetWingshield (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (0);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    int GetAttackspeed (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
