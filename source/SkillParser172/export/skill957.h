//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
39570  "–í–µ–ª–∏–∫–∏–π –º–µ—á-–∫–æ—Å—Ç–æ–ª–æ–º"39571  "^ff5c00–í–µ–ª–∏–∫–∏–π –º–µ—á-–∫–æ—Å—Ç–æ–ª–æ–º^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: 20 –º–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: 75–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: 0,3 —Å–µ–∫.–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: 0,7 —Å–µ–∫.–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: 3,0 —Å–µ–∫.^ffcb4a–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏: 0,2–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–µ—á^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú–æ—â—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ê—Å—É—Ä–∞–ù–∞–Ω–æ—Å–∏—Ç 110%% –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–∑. —É—Ä–æ–Ω–∞, –ø–ª—é—Å 100%% —É—Ä. –æ—Ä—É–∂–∏—è, –ø–ª—é—Å 1650 –µ–¥.–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 60%% –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–∞–≥–∞ —ç—Ñ—Ñ–µ–∫—Ç '–í–µ–ª–∏–∫–æ–µ –û–∫–æ –∫–∞–º–µ–Ω–Ω–æ–≥–æ –∑–º–µ—è'.–ï—Å–ª–∏ –≤—Ä–∞–≥–∞, –Ω–∞—Ö–æ–¥. –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —ç—Ç–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞, –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–æ–º ^96f5ff'–í–µ–ª–∏–∫–∞—è —Å–∏–ª–∞ —Ç—ã—Å—è—á–∏ –∑–≤–µ—Ä–µ–π'^ffffff,–æ–Ω –¥–æ–ø. –ø–æ–ª—É—á–∏—Ç 7950 –µ–¥. —É—Ä–æ–Ω–∞ –º–µ—Ç–∞–ª–ª–æ–º, –∞ –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç. –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã —Å–Ω–∏–∑—è—Ç—Å—è –Ω–∞ 12 –µ–¥. –Ω–∞ 3 –º–∏–Ω.–° –≤–µ—Ä. 25%% –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–∞–≥–∞ —ç—Ñ—Ñ–µ–∫—Ç '–í–µ–ª–∏–∫–æ–µ –û–∫–æ –∫—Ä–æ–≤–∞–≤–æ–≥–æ –º–µ—á–∞'.–ï—Å–ª–∏ –≤—Ä–∞–≥–∞, –Ω–∞—Ö–æ–¥—è—â. –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —ç—Ç–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞, –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–æ–º ^96f5ff'–í–µ–ª–∏–∫–∏–π —É–¥–∞—Ä –ø—É—Å—Ç–æ—Ç—ã'^ffffff,–æ–Ω –¥–æ–ø. –ø–æ–ª—É—á–∏—Ç 3750 –µ–¥. —É—Ä–æ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–≥–ª—É—à–µ–Ω –Ω–∞ ^96f5ff5^ffffff —Å–µ–∫.^ffcb4a–≠—Ñ—Ñ–µ–∫—Ç –∑–æ–ª–æ—Ç–æ–π —Ä—É–Ω—ã:@1^ffcb4a1-4 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff20%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff1780^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞^ffcb4a5-7 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff30%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff2670^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞^ffcb4a8-9 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff40%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff3560^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞^ffcb4a 10 —É—Ä.: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff50%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff4450^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞@1@2^ffcb4a–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è ^96f5ff%d%%^ffcb4a —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –∏ ^96f5ff%d^ffcb4a –µ–¥. —É—Ä–æ–Ω–∞.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL957 
#define __CPPGEN_GNET_SKILL957 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill957:public Skill 
    { 
    public: 
        enum { SKILL_ID = 957 }; 
        Skill957 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill957Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 50;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 50;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill957Stub ():SkillStub (957) 
    { 
        cls                 = 127; 
#ifdef _SKILL_CLIENT 
        name                = L"º”ÀŸ√‚‘Œºı…Àº”∂‹≥¨º∂±£ª§"; 
        nativename          = "º”ÀŸ√‚‘Œºı…Àº”∂‹≥¨º∂±£ª§"; 
        icon                = ""; 
#endif 
        max_level           = 10; 
        type                = 3; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 0; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 0; 
        allow_forms         = 0; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "–Ó∆¯.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 2; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 50;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 1,2,3,4,5,6,7,8,9,10 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (60);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (0));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (45);
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format);
        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (skill->GetMagicdamage ());
            skill->GetVictim ()->SetRatio (0.2 * skill->GetLevel ());
            skill->GetVictim ()->SetSpeedup (1);
            skill->GetVictim ()->SetTime (skill->GetMagicdamage ());
            skill->GetVictim ()->SetAmount (20000 * skill->GetLevel ());
            skill->GetVictim ()->SetValue (1);
            skill->GetVictim ()->SetWingshield (1);
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetTime (skill->GetMagicdamage ());
            skill->GetVictim ()->SetRatio (0.1 * skill->GetLevel ());
            skill->GetVictim ()->SetDechurt (1);
            skill->GetVictim ()->SetTime (skill->GetMagicdamage ());
            skill->GetVictim ()->SetFreemove (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (30);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
