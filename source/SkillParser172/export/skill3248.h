//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
32480  "–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ"32481  "^ff0000–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –£—Ä. %d|if&dynskilllv()>0&^ffcb4a +%d&|^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff225^ffffff^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff–º–≥–Ω–æ–≤–µ–Ω–Ω–æ^ffcb4a^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff300 ^ffcb4a—Å–µ–∫.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–∫–∏–Ω–∂–∞–ª—ã^ffcb4a–†–∞—Å—Ö–æ–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ^96f5ff–ñ–∏–≤–∞—è –¥—É—à–∞^ffffff^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ë–ª–∞–≥–æ—á–µ—Å—Ç–∏–≤—ã–π–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ ^96f5ff|if&(skilllv()+dynskilllv())<2&10&20|^ffffff —Å–µ–∫.–£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff12^ffffff –µ–¥.,–ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ ^96f5ff2^ffffff —Å–µ–∫.–£—Ä–æ–Ω –æ—Ç —É–º–µ–Ω–∏–π –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff50%%^ffffff (—Ç–æ–ª—å–∫–æ –ø–æ –º–æ–Ω—Å—Ç—Ä–∞–º) –Ω–∞ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —É–º–µ–Ω–∏—è.–í–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è —É–º–µ–Ω–∏–µ ^96f5ff'–ë—Ä–æ—Å–æ–∫'^ffffff, —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff200%%^ffffff.|if&(skilllv()+dynskilllv())>2&^ffffff–£—Ä. 3: –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è ^96f5ff5^ff0000 –æ—á–∫–æ–≤ –∫–æ–º–±–æ.&^808080–£—Ä. 3: –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 5 –æ—á–∫–æ–≤ –∫–æ–º–±–æ."*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL3248 
#define __CPPGEN_GNET_SKILL3248 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill3248:public Skill 
    { 
    public: 
        enum { SKILL_ID = 3248 }; 
        Skill3248 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill3248Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp(225);
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill3248Stub ():SkillStub (3248) 
    { 
        cls                 = 5; 
#ifdef _SKILL_CLIENT 
        name                = L"¥¥ ¿°§œ˚ ß"; 
        nativename          = "¥¥ ¿°§œ˚ ß"; 
        icon                = "¥¥ ¿œ˚ ß.dds"; 
#endif 
        max_level           = 2; 
        type                = 2; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 8; 
        eventflag           = 0; 
        is_senior           = 0; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1125; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 1; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 49982; 
        itemcostcount       = 1; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "¥ÃøÕ_¥¥ ¿_ª˜÷–.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 5; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(0, 1)); 
        restrict_weapons.push_back (23749); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 0;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 300000,300000,300000,300000,300000,300000,300000,300000,300000,300000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 100,100,100,100,100,100,100,100,100,100 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 49946,49947,49947,49947,49947,49947,49947,49947,49947,49947 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (16);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1);
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 225,225,225,225,225,225,225,225,225,225 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
    int GetIntroduction (Skill * skill, const wchar_t * buffer, int length, const wchar_t * format) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (2);
            skill->GetVictim ()->SetTime(10000 * skill->GetLevel());
            skill->GetVictim ()->SetRatio(1);
            skill->GetVictim ()->SetAmount(2);
            skill->GetVictim ()->SetValue(3249);
            skill->GetVictim ()->SetAuracurse4ASN(1);
            skill->GetVictim ()->SetAuracurse(1);
            skill->GetVictim ()->SetProbability (100);
            skill->GetVictim ()->SetTime(2000);
            skill->GetVictim ()->SetRatio(0);
            skill->GetVictim ()->SetAmount(10);
            skill->GetVictim ()->SetValue(12);
            skill->GetVictim ()->SetInvisible2(1);
            skill->GetVictim ()->SetProbability (100);
            skill->GetVictim ()->SetTime(100);
            skill->GetVictim ()->SetRatio(0.1);
            skill->GetVictim ()->SetAmount(skill->GetLevel());
            skill->GetVictim ()->SetValue(3250);
            skill->GetVictim ()->SetAurabless2(1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (35);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 9;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
