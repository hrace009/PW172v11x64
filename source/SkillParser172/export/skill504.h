//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
45040  "–í–µ–ª–∏–∫–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–¥–æ–∫—Å"45041  "^ff5c00–í–µ–ª–∏–∫–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–¥–æ–∫—Å^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff%d^ffffff^ffcb4a –º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff2 ^ffcb4a–º–∏–Ω.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–•—Ä–∞–±—Ä–æ—Å—Ç—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ê—Å—É—Ä–∞–û–¥–∏–Ω –¥—Ä—É–∏–¥ –≤—ã—É—á–∏–ª —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ –∫–Ω–∏–≥–µ, —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–π —É —Ä–∞—Å—Å–µ—è–Ω–Ω–æ–≥–æ –º–∞–≥–∞.–ù–∞–Ω–æ—Å–∏—Ç —Ü–µ–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, —Ä–∞–≤–Ω—ã–π –±–∞–∑–æ–≤–æ–º—É –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —É—Ä–æ–Ω—É, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è,–ø–ª—é—Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ ^96f5ff150%%^ffffff –∑–∞–ø–∞—Å–∞ –ú–≠ –¥—Ä—É–∏–¥–∞ –∏ ^96f5ff20%%^ffffff –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞.–ù–∞ ^96f5ff15^ffffff —Å–µ–∫ –≤–≤–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–æ–∫–∞, –æ—Ç —á–µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff70%%^ffffff,–∞ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π - –Ω–∞ ^96f5ff90%%^ffffff.^a6caf0–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ^ffffff1^a6caf0 —Ü–∏.^00ff00–≠—Ñ—Ñ–µ–∫—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–Ω—ã:@1^00ff001-4 —É—Ä.: –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff100%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.^00ff005-7 —É—Ä.: –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff150%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.^00ff008-9 —É—Ä.: –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff200%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫. ^00ff0010 —É—Ä.: –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff250%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.@1@2^00ff00–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ ^96f5ff%d%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL504 
#define __CPPGEN_GNET_SKILL504 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill504:public Skill 
    { 
    public: 
        enum { SKILL_ID = 504 }; 
        Skill504 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill504Stub:public SkillStub 
    { 
    public: 
#ifdef _SKILL_SERVER 
        class State1:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 400;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (30);
                skill->GetPlayer ()->SetPray (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 1;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State2:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 1100;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
                skill->GetPlayer ()->SetDecmp (120);
                skill->SetPlus (3373);
                skill->SetRatio (0);
                skill->SetDamage (skill->GetAttack ());
                skill->GetPlayer ()->SetPerform (1);
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
#ifdef _SKILL_SERVER 
        class State3:public SkillStub::State
        {
          public:
            int GetTime (Skill * skill) const
            {
                return 0;
            }
            bool Quit (Skill * skill) const
            {
                return false;
            }
            bool Loop (Skill * skill) const
            {
                return false;
            }
            bool Bypass (Skill * skill) const
            {
                return false;
            }
            void Calculate (Skill * skill) const
            {
            }
            bool Interrupt (Skill * skill) const
            {
                return false;
            }
            bool Cancel (Skill * skill) const
            {
                return 0;
            }
            bool Skip (Skill * skill) const
            {
                return 0;
            }
        };
#endif 
    Skill504Stub ():SkillStub (504) 
    { 
        cls                 = 4; 
#ifdef _SKILL_CLIENT 
        name                = L"’Ê°§µÿ¡—"; 
        nativename          = "’Ê°§µÿ¡—"; 
        icon                = "µÿ¡—1.dds"; 
#endif 
        max_level           = 1; 
        type                = 1; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 20; 
        eventflag           = 0; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1507; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 12; 
        doenchant           = 1; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 1; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = "1µÿ¡—.sgc"; 
        aerial_effect       = ""; 
#endif 
        range.type          = 2; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(107, 10)); 
        restrict_weapons.push_back (9); 
#ifdef _SKILL_SERVER 
        statestub.push_back (new State1 ()); 
        statestub.push_back (new State2 ()); 
        statestub.push_back (new State3 ()); 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1100;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 6000,6000,6000,6000,6000,6000,6000,6000,6000,6000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000,1500000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 92,92,92,92,92,92,92,92,92,92 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (10);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 0.2 * skill->GetLevel ());
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (20 + 2.5 * skill->GetLevel ()));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 150,150,150,150,150,150,150,150,150,150 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, 150, 9);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        bool StateAttack (Skill * skill) const
        {
            skill->GetVictim ()->SetProbability (1.0 * 100);
            skill->GetVictim ()->SetValue (9);
            skill->GetVictim ()->SetRepel (1);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (8);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 10;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {;
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (2.5);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
