//Skill Parser (c)Deadraky 2023 

/* SKILL DESCRIPTION BEGIN */ 
/* 
45100  "–í–µ–ª–∏–∫–æ–µ –∑–∞–∫–ª—è—Ç–∏–µ –æ—Ü–µ–ø–µ–Ω–µ–Ω–∏—è"45101  "^ff5c00–í–µ–ª–∏–∫–æ–µ –∑–∞–∫–ª—è—Ç–∏–µ –æ—Ü–µ–ø–µ–Ω–µ–Ω–∏—è^ffcb4a–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–±—Ä–∞–∑–µ –ª–∏—Å–∏—Ü—ã^ffcb4a–î–∞–ª—å–Ω–æ—Å—Ç—å: ^96f5ff%d^ffcb4a –º^ffcb4a–ú–∞–≥. —ç–Ω–µ—Ä–≥–∏—è: ^96f5ff%d^ffffff^ffcb4a–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ^ffffff1 ^ffcb4a—Å–µ–∫.^ffcb4a–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ^ffffff1,3 ^ffcb4a—Å–µ–∫.^ffcb4a–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ^ffffff2 ^ffcb4a–º–∏–Ω.^ffcb4a–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä—É–∂–∏—é: ^ffffff–º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ, –±–µ–∑ –æ—Ä—É–∂–∏—è^ffcb4a–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ^ff5c00–ú–æ—â—å^ffcb4a–°—Ç–∞—Ç—É—Å: ^ffffff–ú—É–¥—Ä–µ—Ü–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å –¥—Ä—É–∏–¥—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é.–ù–∞–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –ø–ª—é—Å ^96f5ff100%%^ffffff —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è,–ø–ª—é—Å —É—Ä–æ–Ω —Å—Ç–∏—Ö–∏–µ–π –¥–µ—Ä–µ–≤–∞, —Ä–∞–≤–Ω—ã–π ^96f5ff150%%^ffffff –º–∞–∫—Å–∏–º—É–º–∞ –ñ–° –¥—Ä—É–∏–¥–∞,–ø–ª—é—Å ^96f5ff20%%^ffffff –±–∞–∑–æ–≤–æ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞.–°–Ω–∏–º–∞–µ—Ç —Å —Ü–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç '–û–ø–µ–∫–∞ –¥—É—Ö–æ–≤'.–ù–∞ ^96f5ff15^ffffff —Å–µ–∫. —Å–Ω–∏–∂–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ —Ü–µ–ª–∏ –Ω–∞ ^96f5ff100%%^ffffff, –∞ –º–µ—Ç–∫–æ—Å—Ç—å - –Ω–∞ –≤—Å–µ ^96f5ff300%%^ffffff.–ù–µ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è.^a6caf0–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ^ffffff1^a6caf0 —Ü–∏.^00ff00–≠—Ñ—Ñ–µ–∫—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–Ω—ã:@1^00ff001-4 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff100%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.^00ff005-7 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff150%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.^00ff008-9 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff200%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫. ^00ff0010 —É—Ä.: —Å–Ω–∏–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff250%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.@1@2^00ff00–°–Ω–∏–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É —Ü–µ–ª–∏ –Ω–∞ ^96f5ff%d%%^00ff00 –Ω–∞ ^96f5ff10^00ff00 —Å–µ–∫.@2"*/ 
/* SKILL DESCRIPTION END */ 

#ifndef __CPPGEN_GNET_SKILL510 
#define __CPPGEN_GNET_SKILL510 
namespace GNET 
{ 
#ifdef _SKILL_SERVER 
    class Skill510:public Skill 
    { 
    public: 
        enum { SKILL_ID = 510 }; 
        Skill510 ():Skill (SKILL_ID){ } 
    }; 
#endif 
    class Skill510Stub:public SkillStub 
    { 
    public: 
    Skill510Stub ():SkillStub (510) 
    { 
        cls                 = 4; 
#ifdef _SKILL_CLIENT 
        name                = L"’Ê°§“∞–‘ªÿ∏¥"; 
        nativename          = "’Ê°§“∞–‘ªÿ∏¥"; 
        icon                = "“∞–‘ªÿ∏¥1.dds"; 
#endif 
        max_level           = 1; 
        type                = 5; 
        allow_ride          = 0; 
        attr                = 1; 
        rank                = 20; 
        eventflag           = 1; 
        is_senior           = 1; 
        is_inherent         = 0; 
        is_movingcast       = 0; 
        npcdelay            = 0; 
        showorder           = 1510; 
        allow_forms         = 1; 
        apcost              = 0; 
        apgain              = 0; 
        doenchant           = 0; 
        dobless             = 0; 
        arrowcost           = 0; 
        allow_land          = 1; 
        allow_air           = 1; 
        allow_water         = 1; 
        notuse_in_combat    = 0; 
        restrict_corpse     = 0; 
        restrict_change     = 0; 
        restrict_attach     = 0; 
        auto_attack         = 0; 
        time_type           = 0; 
        long_range          = 0; 
        posdouble           = 0; 
        clslimit            = 0; 
        commoncooldown      = 0; 
        commoncooldowntime  = 0; 
        itemcost            = 0; 
        itemcostcount       = 0; 
        combosk_preskill    = 0; 
        combosk_interval    = 0; 
        combosk_nobreak     = 0; 
#ifdef _SKILL_CLIENT 
        effect              = ""; 
        aerial_effect       = ""; 
#endif 
        range.type          = 0; 
        has_stateattack     = 0; 
        runes_attr          = 0; 
#ifdef _SKILL_CLIENT 
        gfxfilename         = ""; 
        gfxhangpoint        = "0"; 
#endif 
        gfxtarget           = 0; 
        feature             = 0; 
        extra_effect        = 0; 
        immune_casting      = 0; 
        pre_skills.push_back (std::pair < ID, int >(109, 10)); 
        restrict_weapons.push_back (9); 
#ifdef _SKILL_SERVER 
#endif 
    } 
        int GetExecutetime (Skill * skill) const
        {
            return 1500;
        }
    int GetCoolingtime (Skill * skill) const 
    { 
        static int aarray[10] = { 4000,4000,4000,4000,4000,4000,4000,4000,4000,4000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredSp (Skill * skill) const 
    { 
        static int aarray[10] = { 1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 89,89,89,89,89,89,89,89,89,89 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredItem (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredMoney (Skill * skill) const 
    { 
        static int aarray[10] = { 2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetRequiredRealmLevel (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
        float GetRadius (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAttackdistance (Skill * skill) const
        {
            return (float) (0);
        }
        float GetAngle (Skill * skill) const
        {
            return (float) (1 - 0.0111111 * (20 + 2.5 * skill->GetLevel ()));
        }
        float GetPraydistance (Skill * skill) const
        {
            return (float) (skill->GetPlayer ()->GetRange () + 3 + 0.2 * skill->GetLevel ());
        }
    float GetMpcost (Skill * skill) const 
    { 
        static float aarray[10] = { 19,19,19,19,19,19,19,19,19,19 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    bool CheckComboSkExtraCondition (Skill * skill) const 
    { 
        return 1; 
    } 
    int GetCoolDownLimit (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
    int GetCostShieldEnergy (Skill * skill) const 
    { 
        static int aarray[10] = { 0,0,0,0,0,0,0,0,0,0 }; 
        return aarray[skill->GetLevel () - 1]; 
    } 
#ifdef _SKILL_CLIENT 
        int GetIntroduction (Skill * skill, wchar_t * buffer, int length, wchar_t * format) const
        {
            return _snwprintf (buffer, length, format, 25);

        }
#endif 
#ifdef _SKILL_SERVER 
        int GetEnmity (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
    int GetMaxAbility (Skill * skill) const 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool StateAttack (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    bool BlessMe (Skill * skill) const 
    { 
        return 1; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        float GetEffectdistance (Skill * skill) const
        {
            return (float) (25);
        }
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent0 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent1 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent2 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent3 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
    float GetTalent4 (PlayerWrapper * player) 
    { 
        return 0; 
    } 
#endif 
#ifdef _SKILL_SERVER 
        int GetAttackspeed (Skill * skill) const
        {
            return 0;
        }
#endif 
#ifdef _SKILL_SERVER 
        bool TakeEffect (Skill * skill) const
        {
            skill->GetPlayer ()->SetInchpgen (50);
            skill->GetPlayer ()->SetIncmpgen (20);
            return true;
        }
#endif 
#ifdef _SKILL_SERVER 
        float GetHitrate (Skill * skill) const
        {
            return (float) (1.0);
        }
#endif 
#ifdef _SKILL_SERVER 
    void ComboSkEndAction (Skill * skill) const 
    { 
        return; 
    } 
#endif 
    }; 
} 
#endif 
